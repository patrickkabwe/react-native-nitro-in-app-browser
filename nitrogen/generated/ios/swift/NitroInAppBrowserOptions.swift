///
/// NitroInAppBrowserOptions.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroInAppBrowserOptions`, backed by a C++ struct.
 */
public typealias NitroInAppBrowserOptions = margelo.nitro.nitroinappbrowser.NitroInAppBrowserOptions

public extension NitroInAppBrowserOptions {
  private typealias bridge = margelo.nitro.nitroinappbrowser.bridge.swift

  /**
   * Create a new instance of `NitroInAppBrowserOptions`.
   */
  init(dismissButtonLabel: NitroInAppBrowserDismissButtonLabel?, presentationStyle: String?, barColor: String?, controlColor: String?) {
    self.init({ () -> bridge.std__optional_NitroInAppBrowserDismissButtonLabel_ in
      if let __unwrappedValue = dismissButtonLabel {
        return bridge.create_std__optional_NitroInAppBrowserDismissButtonLabel_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = presentationStyle {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = barColor {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = controlColor {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var dismissButtonLabel: NitroInAppBrowserDismissButtonLabel? {
    @inline(__always)
    get {
      return self.__dismissButtonLabel.value
    }
    @inline(__always)
    set {
      self.__dismissButtonLabel = { () -> bridge.std__optional_NitroInAppBrowserDismissButtonLabel_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_NitroInAppBrowserDismissButtonLabel_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var presentationStyle: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__presentationStyle.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__presentationStyle = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var barColor: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__barColor.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__barColor = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var controlColor: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__controlColor.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__controlColor = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
