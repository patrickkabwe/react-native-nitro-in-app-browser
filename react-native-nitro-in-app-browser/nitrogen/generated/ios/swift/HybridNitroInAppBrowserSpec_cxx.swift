///
/// HybridNitroInAppBrowserSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridNitroInAppBrowserSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public class HybridNitroInAppBrowserSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::inappbrowser::bridge::swift`)
   * from `NitroInAppBrowser-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.inappbrowser.bridge.swift

  /**
   * Holds an instance of the `HybridNitroInAppBrowserSpec` Swift protocol.
   */
  private var __implementation: any HybridNitroInAppBrowserSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_margelo__nitro__inappbrowser__HybridNitroInAppBrowserSpec_

  /**
   * Create a new `HybridNitroInAppBrowserSpec_cxx` that wraps the given `HybridNitroInAppBrowserSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridNitroInAppBrowserSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridNitroInAppBrowserSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridNitroInAppBrowserSpec() -> any HybridNitroInAppBrowserSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridNitroInAppBrowserSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridNitroInAppBrowserSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridNitroInAppBrowserSpec_cxx {
    return Unmanaged<HybridNitroInAppBrowserSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<margelo::nitro::inappbrowser::HybridNitroInAppBrowserSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_margelo__nitro__inappbrowser__HybridNitroInAppBrowserSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_margelo__nitro__inappbrowser__HybridNitroInAppBrowserSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_margelo__nitro__inappbrowser__HybridNitroInAppBrowserSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  // Properties
  

  // Methods
  @inline(__always)
  public func open(url: std.string, options: bridge.std__optional_NitroInAppBrowserOptions_) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.open(url: String(url), options: { () -> NitroInAppBrowserOptions? in
        if let __unwrapped = options.value {
          return __unwrapped
        } else {
          return nil
        }
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public func close() -> bridge.Result_void_ {
    do {
      try self.__implementation.close()
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
}
