///
/// NitroInAppBrowser-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridNitroInAppBrowserSpec` to properly resolve imports.
namespace margelo::nitro::inappbrowser { class HybridNitroInAppBrowserSpec; }
// Forward declaration of `NitroInAppBrowserDismissButtonLabel` to properly resolve imports.
namespace margelo::nitro::inappbrowser { enum class NitroInAppBrowserDismissButtonLabel; }
// Forward declaration of `NitroInAppBrowserOptions` to properly resolve imports.
namespace margelo::nitro::inappbrowser { struct NitroInAppBrowserOptions; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroInAppBrowserSpecCxx` to properly resolve imports.
namespace NitroInAppBrowser { class HybridNitroInAppBrowserSpecCxx; }

// Include C++ defined types
#include "HybridNitroInAppBrowserSpec.hpp"
#include "NitroInAppBrowserDismissButtonLabel.hpp"
#include "NitroInAppBrowserOptions.hpp"
#include <memory>
#include <optional>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::inappbrowser::bridge::swift {

  // pragma MARK: std::optional<NitroInAppBrowserDismissButtonLabel>
  /**
   * Specialized version of `std::optional<NitroInAppBrowserDismissButtonLabel>`.
   */
  using std__optional_NitroInAppBrowserDismissButtonLabel_ = std::optional<NitroInAppBrowserDismissButtonLabel>;
  inline std::optional<NitroInAppBrowserDismissButtonLabel> create_std__optional_NitroInAppBrowserDismissButtonLabel_(const NitroInAppBrowserDismissButtonLabel& value) {
    return std::optional<NitroInAppBrowserDismissButtonLabel>(value);
  }
  
  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }
  
  // pragma MARK: std::optional<NitroInAppBrowserOptions>
  /**
   * Specialized version of `std::optional<NitroInAppBrowserOptions>`.
   */
  using std__optional_NitroInAppBrowserOptions_ = std::optional<NitroInAppBrowserOptions>;
  inline std::optional<NitroInAppBrowserOptions> create_std__optional_NitroInAppBrowserOptions_(const NitroInAppBrowserOptions& value) {
    return std::optional<NitroInAppBrowserOptions>(value);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::inappbrowser::HybridNitroInAppBrowserSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::inappbrowser::HybridNitroInAppBrowserSpec>`.
   */
  using std__shared_ptr_margelo__nitro__inappbrowser__HybridNitroInAppBrowserSpec_ = std::shared_ptr<margelo::nitro::inappbrowser::HybridNitroInAppBrowserSpec>;
  std::shared_ptr<margelo::nitro::inappbrowser::HybridNitroInAppBrowserSpec> create_std__shared_ptr_margelo__nitro__inappbrowser__HybridNitroInAppBrowserSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__inappbrowser__HybridNitroInAppBrowserSpec_(std__shared_ptr_margelo__nitro__inappbrowser__HybridNitroInAppBrowserSpec_ cppType);

} // namespace margelo::nitro::inappbrowser::bridge::swift
